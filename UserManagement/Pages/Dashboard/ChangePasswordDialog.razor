@inject IUserService CategoryService
@inject IJSRuntime JS
@using System.Net
@using System.Security.Cryptography
@using System.Text
@using FluentValidation
@using UserManagement.Services
@using UserManagement.Shared.Models
@using UserManagement.Validators
@using UserManagement.Helpers
@using Severity = MudBlazor.Severity
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject HashHelper HashHelper



<MudDialog>
    <DialogContent>
        <MudForm Class="d-flex justify-content-center align-items-center flex-column" Model=@(model) @ref="@form" Validation="@(formValidator.ValidateValue)" ValidationDelay="0">
            <MudTextField Class="mb-3 w-50" @bind-Value="model.OldPass" For="@(() => model.OldPass)" Label="رمز قدیمی" Variant="Variant.Outlined"></MudTextField>
            <MudTextField Class="mb-3 w-50" @bind-Value="model.NewPass" For="@(() => model.NewPass)" Label="رمز جدید" Variant="Variant.Outlined"></MudTextField>
            <MudTextField Class="mb-3 w-50" @bind-Value="model.NewPassConfirmation" For="@(() => model.NewPassConfirmation)" Label="تایید رمز جدید" Variant="Variant.Outlined"></MudTextField>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Surface" OnClick="() => MudDialog.Cancel()">لغو</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await Submit())">ذخیره</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    MudForm form;

    ChangePasswordFluentValidator formValidator = new ChangePasswordFluentValidator();

    public ChangePasswordForm model = new ChangePasswordForm();

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
             var result = await UserService.ChangePassword(new ChangePasswordForm()
             {
                 OldPass = HashHelper.CreateSHA512(model.OldPass),
                 NewPass = HashHelper.CreateSHA512(model.NewPass),
                 NewPassConfirmation = HashHelper.CreateSHA512(model.NewPassConfirmation),
             });
             if (result.Success)
             {
                 MudDialog.Close(result);
             }
             else
             {
                 Snackbar.Add(result.ErrorMessage, Severity.Error);
             }
        }
    }
    
   
    
}