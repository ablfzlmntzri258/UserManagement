@inject IJSRuntime JS
@using UserManagement.Services
@using UserManagement.Shared.Models
@using UserManagement.Validators
@using Severity = MudBlazor.Severity
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject IWebHostEnvironment WebHostEnvironment


<MudDialog>
    <DialogContent>
        <MudForm>
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".pdf" FilesChanged="AddFiles">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               for="@context.Id">
                        اضافه کردن
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
        </MudForm>
        @if (files.Count == 0)
        {
            <p class="mt-5">هیچ فایلی اضافه نشده است</p>
        }
        else
        {
            <MudTable Class="mt-5 w-50 mx-auto" T="IBrowserFile" Items="@files" Hover="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>نام فایل</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class="w-100" DataLabel="File Name">@context.Name</MudTd>
                    <MudTd dir="ltr">
                        <MudButton OnClick="@(() => DeleteFileFromList(context))" Color="Color.Error">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Surface" OnClick="() => MudDialog.Cancel()">لغو</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await Submit())">ذخیره</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private FileModelFluentValidator ValidationRules = new();

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private async void AddFiles(IReadOnlyList<IBrowserFile> files)
    {
        List<string> incorrectFileNames = new();
        var EmployeeCodes = files.Where(file => ValidationRules.IsFileNameValid(file.Name.Replace(".pdf", "")))
        .Select(file => int.Parse(file.Name.Split("-")[0])).ToList();
        var checkedEmployeeCodes = await UserService.CheckEmployeeCodes(EmployeeCodes);
        if (checkedEmployeeCodes == null) return;
        foreach (var file in files)
        {
            if (ValidationRules.IsFileNameValid(file.Name.Replace(".pdf", "")) && checkedEmployeeCodes.Contains(int.Parse(file.Name.Split("-")[0])))
            {
                this.files.Add(file);
            }
            else
            {
                incorrectFileNames.Add(file.Name);
            }
        }
        StateHasChanged();
        if (incorrectFileNames.Count > 0)
            Snackbar.Add("فایل های زیر به دلیل نام غیر مجاز قابل اضافه شدن نیستند: <br>" + string.Join("<br>", incorrectFileNames), Severity.Error);
    }


    private void DeleteFileFromList(IBrowserFile file)
    {
        files.Remove(file);
    }

    private async Task Submit()
    {
        if (files.Count == 0)
        {
            Snackbar.Add("هیچ فایلی اضافه نشده است", Severity.Error);

        }
        else
        {
            foreach (var file in files)
            {
                var folders = file.Name.Replace(".pdf", "").Split("-");
                var directory = $"{WebHostEnvironment.ContentRootPath}\\{Constants.ProjectFolderAddress}\\{folders[0]}\\{folders[1]}\\{folders[2]}\\";

                var path = $"{directory}{file.Name}";

                if (!Directory.Exists(directory))
                    Directory.CreateDirectory(directory);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(1024 * 1024 * 10).CopyToAsync(fs);
                fs.Close();
            }
            MudDialog.Close();
        }
        // await form.Validate();
        // if (form.IsValid)
        // {

        //     // string[] folders = model.Name.Split("-");
        //     // var path = Path.Combine(WebHostEnvironment.WebRootPath, "financial", folders[0], folders[1], folders[2]);
        //     // // Directory.CreateDirectory(path);
        //     // using (var fileStream = model.File.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10))
        //     // using (var fileWriteStream = new FileStream(path, FileMode.Create))
        //     // {
        //     //     await fileStream.CopyToAsync(fileWriteStream);
        //     // }
        //     // MudDialog.Close();
        //     var checkResult = await UserService.CheckEmployeeCodes(new List<int> { model.EmployeeCode });
        //     if (checkResult != null && checkResult.Contains(model.EmployeeCode))
        //     {
        //         var tempName = $"{model.EmployeeCode}-{model.Year}-{model.Month}{Path.GetExtension(model.File.Name)}";
        //         var directory = $"{WebHostEnvironment.WebRootPath}\\financial\\{model.EmployeeCode}\\{model.Year}\\{model.Month}\\";

        //         var path = $"{directory}{tempName}";

        //         if (!Directory.Exists(directory))
        //             Directory.CreateDirectory(directory);

        //         await using FileStream fs = new(path, FileMode.Create);
        //         await model.File.OpenReadStream(1024 * 1024 * 10).CopyToAsync(fs);
        //         MudDialog.Close();
        //     }
        //     else if (checkResult != null && !checkResult.Contains(model.EmployeeCode))
        //     {
        //         Snackbar.Add("User with this employee code was not found", Severity.Error);
        //     }
        //     else
        //     {
        //         Snackbar.Add("Unexpected Error", Severity.Error);
        //     }

        // }
    }

}