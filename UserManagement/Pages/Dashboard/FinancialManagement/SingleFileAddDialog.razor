@inject IJSRuntime JS
@using UserManagement.Services
@using UserManagement.Shared.Models
@using UserManagement.Validators
@using Severity = MudBlazor.Severity
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject IWebHostEnvironment WebHostEnvironment


<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@form" Validation="@(ValidationRules.ValidateValue)" ValidationDelay="0">
            <MudAutocomplete Class="mb-3" Margin="Margin.None" T="string" Label="کاربران" @bind-Value="SelectedUser" SearchFunc="@Search1"
                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                             CoerceText="@coerceText" CoerceValue="@coerceValue"
                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" 
                             Variant="Variant.Outlined"/>
            <MudSelect Class="mb-3 " T="int" Label="سال" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.Year" For="@(() => model.Year)">
                @foreach (var y in years)
                {
                    <MudSelectItem Value="@y">@(y)</MudSelectItem>
                }
            </MudSelect>
            <MudSelect Class="mb-3 " T="int" Label="ماه" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.Month" For="@(() => model.Month)">
                @foreach (var m in months)
                {
                    <MudSelectItem Value="@m">@(m)</MudSelectItem>
                }
            </MudSelect>
            <MudFileUpload T="IBrowserFile" Accept=".pdf" For="@(() => model.File)" @bind-Files="model.File" OnFilesChanged="UploadFiles" SuppressOnChangeWhenInvalid="SuppressOnChangeWhenInvalid">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               for="@context.Id">
                        اضافه کردن
                    </MudButton>
                    <MudButton OnClick="@context.Actions.ClearAsync"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Clear">
                        حذف فایل انتخاب شده
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
        </MudForm>
        @if(model.File is not null){
            <p>@model.File?.Name</p>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Surface" OnClick="() => MudDialog.Cancel()">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await Submit())">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    List<int> years = new List<int>();
    List<int> months = new List<int>();
    
    protected override async Task OnInitializedAsync()
    {
        for (var i = 1390; i <= 1410; i++)
        {
            years.Add(i);
        }
        for (var i = 1; i <= 12; i++)
        {
            months.Add(i);
        }
        var allUsers = await UserService.GetAll();
        allUsers.ForEach(u => users.Add($"{u.EmployeeCode} - {u.Name}"));
    }
    
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string SelectedUser;
    private List<string> users = new();
    

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value) || value.Length <= 2)
            return new List<string>();
        return users.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    MudForm form;

    private bool SuppressOnChangeWhenInvalid;

    private void UploadFiles(InputFileChangeEventArgs e)
    {
        //If SuppressOnChangeWhenInvalid is false, perform your validations here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        //TODO upload the files to the server
    }

    FileModel model = new();
    private FileModelFluentValidator ValidationRules = new();
    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {

            // string[] folders = model.Name.Split("-");
            // var path = Path.Combine(WebHostEnvironment.WebRootPath, "financial", folders[0], folders[1], folders[2]);
            // // Directory.CreateDirectory(path);
            // using (var fileStream = model.File.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10))
            // using (var fileWriteStream = new FileStream(path, FileMode.Create))
            // {
            //     await fileStream.CopyToAsync(fileWriteStream);
            // }
            // MudDialog.Close();
            int EmployeeCode = int.Parse(SelectedUser.Split(" - ")[0]);
            var checkResult = await UserService.CheckEmployeeCodes(new List<int> { EmployeeCode });
            if (checkResult != null && checkResult.Contains(EmployeeCode))
            {
                var tempName = $"{EmployeeCode}-{model.Year}-{model.Month}{Path.GetExtension(model.File.Name)}";
                var directory = $"{WebHostEnvironment.ContentRootPath}\\{Constants.ProjectFolderAddress}\\{EmployeeCode}\\{model.Year}\\{model.Month}\\";

                var path = $"{directory}{tempName}";

                if (!Directory.Exists(directory))
                    Directory.CreateDirectory(directory);

                await using FileStream fs = new(path, FileMode.Create);
                await model.File.OpenReadStream(1024 * 1024 * 10).CopyToAsync(fs);
                fs.Close();
                Console.WriteLine("Here");
                MudDialog.Close();
            }
            else if (checkResult != null && !checkResult.Contains(EmployeeCode))
            {
                Snackbar.Add("کاربر با این کد یافت نشد", Severity.Error);
            }
            else
            {
                Snackbar.Add("خطای غیر منتظره", Severity.Error);
            }

        }
    }

}