@page "/dashboard"
@using UserManagement.Helpers;
@using UserManagement.Services;
@using UserManagement.Shared.Models
@using UserManagement.Shared.Interface
@layout Shared.DashboardLayout
@inject FileHelper fileHelper
@inject PDFHelper PDFHelper
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@inject IExternalAuthService AuthService
@inject DateHelper DateHelper

<MudTable T="FileModel" Items="@allFiles" Filter="new Func<FileModel, bool>(FilterFunc)"
          SortLabel="Sort By">
    <ToolBarContent>
        <MudText Typo="Typo.h6">فایل های من</MudText>
        <MudSpacer />
        @* <MudTextField @bind-Value="Year" InputType="InputType.Number" Placeholder="سال" Class="mt-0 mx-5"></MudTextField> *@
        @* <MudTextField @bind-Value="Month" InputType="InputType.Number" Placeholder="ماه" Class="mt-0 mx-5"></MudTextField> *@
        <MudSelect Class="mb-3 mx-5" Label="سال" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="Year">
            <MudSelectItem Value="String.Empty">همه سال ها</MudSelectItem>
            @foreach (var y in years)
            {
            <MudSelectItem Value="@y.ToString()">@(y)</MudSelectItem>
            }
        </MudSelect>
        <MudSelect Class="mb-3 mx-5" Label="ماه" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="Month">
            <MudSelectItem Value="String.Empty">همه ماه ها</MudSelectItem>
            <MudSelectItem Value="1.ToString()">فروردین</MudSelectItem>
            <MudSelectItem Value="2.ToString()">اردیبهشت</MudSelectItem>
            <MudSelectItem Value="3.ToString()">خرداد</MudSelectItem>
            <MudSelectItem Value="4.ToString()">تیر</MudSelectItem>
            <MudSelectItem Value="5.ToString()">مرداد</MudSelectItem>
            <MudSelectItem Value="6.ToString()">شهریور</MudSelectItem>
            <MudSelectItem Value="7.ToString()">مهر</MudSelectItem>
            <MudSelectItem Value="8.ToString()">آبان</MudSelectItem>
            <MudSelectItem Value="9.ToString()">آذر</MudSelectItem>
            <MudSelectItem Value="10.ToString()">دی</MudSelectItem>
            <MudSelectItem Value="11.ToString()">بهمن</MudSelectItem>
            <MudSelectItem Value="12.ToString()">اسفند</MudSelectItem>
        </MudSelect>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<FileModel, object>(x => x.Name)">نام</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<FileModel, object>(x => x.Year)">سال</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<FileModel, object>(x => x.Month)">ماه</MudTableSortLabel>
        </MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="نام">@context.Name</MudTd>
        <MudTd DataLabel="سال">@context.Year</MudTd>
        <MudTd DataLabel="ماه">@DateHelper.intToMonthName(context.Month)</MudTd>
        <MudTd dir="ltr">
            <MudButton OnClick="@(() => ShowPdf(context))" Color="Color.Error">
                <MudIcon Icon="@Icons.Material.Filled.SimCardDownload" Color="Color.Error" />
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>


@code {
    public string? Year;
    public string? Month;
    List<int> years = new();
    int EmployeeCode;
    List<FileModel> allFiles = new();

    protected override async Task OnInitializedAsync()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        for (var i = 1390; i <= 1410; i++)
        {
            years.Add(i);
        }
        var user = await AuthService.UserAuthenticated();
        // if (authState.User is null)
        //     return;
        EmployeeCode = int.Parse(user.Claims.FirstOrDefault(c => c.Type == "EmployeeCode").Value);
        allFiles = fileHelper.GetUserFiles(EmployeeCode);
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender && allFiles.Count == 0)
        {
            Snackbar.Add("No files were found",Severity.Normal);
        }
    }


    private bool FilterFunc(FileModel element)
    {
        string year = Year ?? "";
        string month = Month ?? "";
        if (element.Year.ToString().Contains(year) &&
            (element.Month.ToString().Equals(month) || month == "")
        )
            return true;
        return false;
    }

    private async void ShowPdf(FileModel file)
    {
        PDFHelper.OpenNewTab(JsRuntime, $"{EmployeeCode}\\{file.Year}\\{file.Month}\\{file.Name}");
    }
}