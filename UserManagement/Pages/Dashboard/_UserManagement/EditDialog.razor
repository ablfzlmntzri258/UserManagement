@inject IJSRuntime JS
@using System.Security.Cryptography
@using System.Text
@using UserManagement.Services
@using UserManagement.Shared.Models
@using UserManagement.Validators
@using Severity = MudBlazor.Severity
@inject IUserService UserService
@inject ISnackbar Snackbar


<MudDialog>
    <DialogContent>
        <MudForm Class="d-flex justify-content-center align-items-center flex-column" Model=@(model) @ref="@form" Validation="@(userValidator.ValidateValue)" ValidationDelay="0">
            <MudTextField Class="mb-3 w-50" @bind-Value="model.Name" For="@(() => model.Name)" Label="نام" Variant="Variant.Outlined"></MudTextField>
            <MudTextField Class="mb-3 w-50" @bind-Value="model.UserName" For="@(() => model.UserName)" Label="نام کاربری" Variant="Variant.Outlined"></MudTextField>
            <MudTextField InputType="InputType.Number" Class="mb-3 w-50" @bind-Value="model.EmployeeCode" For="@(() => model.EmployeeCode)" Label="کد کارمند" Variant="Variant.Outlined"></MudTextField>
            <MudTextField InputType="InputType.Email" Class="mb-3 w-50" @bind-Value="model.Email" For="@(() => model.Email)" Label="ایمیل" Variant="Variant.Outlined"></MudTextField>
            <MudSelect Class="mb-3 " T="int" Label="نقش" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.Permission" For="@(() => model.Permission)">
                <MudSelectItem Value="@(1)">ادمین</MudSelectItem>
                <MudSelectItem Value="@(2)">مالی</MudSelectItem>
                <MudSelectItem Value="@(3)">کارمند</MudSelectItem>
            </MudSelect>

        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Surface" OnClick="() => MudDialog.Cancel()">لغو</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await Submit())">ذخیره</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public User model { get; set; }
    MudForm form;

    UserFluentValidator userValidator = new UserFluentValidator();

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            await HandleUpdateUser();
        }
    }

    public async Task HandleUpdateUser()
    {
        var result = await UserService.Update(model);
        if (result.Success)
        {
            MudDialog.Close(result);
        }
        else
        {
            Snackbar.Add(result.ErrorMessage, Severity.Error);
        }
    }

}