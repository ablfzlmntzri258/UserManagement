@page "/Login"
@inject IUserService UserService
@layout Shared.EmptyLayout
@inject IJSRuntime JS
@using System.Security.Claims
@using System.Security.Cryptography
@using System.Text
@using FluentValidation
@using UserManagement.Services
@using UserManagement.Shared.Interface;
@using UserManagement.Shared.Models
@using UserManagement.Helpers
@using UserManagement.Validators
@using Severity = MudBlazor.Severity
@inject NavigationManager NavigationManager
@inject HashHelper HashHelper
@inject ISnackbar Snackbar

<AuthorizeView Context="LoginContext">
    <Authorized>
        @{ NavigationManager.NavigateTo("/dashboard"); }
    </Authorized>
    <Authorizing>
        <div>در حال بارگذاری</div>
    </Authorizing>
    <NotAuthorized>
        <div class="d-flex justify-content-center align-items-center h-100">
            <div class="w-25">
                <MudForm Model=@(model) @ref="@form" Validation="@(loginValidator.ValidateValue)" ValidationDelay="0">
                    <MudTextField @bind-Value="model.username" For="@(() => model.username)" Immediate="true"
                                  Label="نام کاربری" Variant="Variant.Outlined">
                    </MudTextField>

                    <MudTextField Class="mt-5" @bind-Value="model.password" For="@(() => model.password)" Immediate="true"
                                  Label="رمز عبور" Variant="Variant.Outlined" InputType="InputType.Password">
                    </MudTextField>
                    <div class="d-flex justify-content-center">
                        <MudButton Class="mt-5" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await Submit())">ورود</MudButton>
                    </div>
                </MudForm>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    MudForm form;

    LoginFluentValidator loginValidator = new LoginFluentValidator();

    public LoginForm model = new LoginForm();

    protected override async Task OnInitializedAsync()
    {
        var x = 3;
    }

    private async Task Submit()
    {
        var principal = new ClaimsPrincipal();
        await form.Validate();
        if (form.IsValid)
        {
            var result = await UserService.Login(new UserManagement.Shared.ViewModel.UserVM()
            {
                UserName = model.username,
                Password = HashHelper.CreateSHA512(model.password)
            });
            if (result.Item1)
            {
                NavigationManager.NavigateTo($"/logincallback?token={result.Item2}", true);
            }
            else
            {
                Snackbar.Add("اطلاعات وارد شده صحیح نیست", Severity.Error);
            }
        }
    }

}